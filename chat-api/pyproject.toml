[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chat-api"
version = "1.0.0"
description = "Unified Chat API Service - Intelligent Customer Service Platform"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Chat API Team", email = "dev@chatapi.com"}
]
maintainers = [
    {name = "lonycn", email = "lonycn@qq.com"}
]
keywords = [
    "chat", "api", "customer-service", "ai", "websocket", 
    "fastapi", "python", "async", "microservice"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "asyncmy>=0.2.9",
    "redis>=5.0.1",
    "httpx>=0.25.2",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "loguru>=0.7.2",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
]

[project.optional-dependencies]
# ü§ñ AI & ML Dependencies
ai = [
    "openai>=1.3.0",
    "dashscope>=1.17.0",
    "transformers>=4.36.2",
    "sentence-transformers>=2.2.2",
]

# üìä Analytics & Monitoring
monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "psutil>=5.9.6",
    "py-cpuinfo>=9.0.0",
]

# üß™ Development & Testing
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "httpx>=0.25.2",
    "faker>=20.1.0",
]

# üöÄ Production Dependencies
prod = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk>=1.39.0",
]

# üìä Data Processing
data = [
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "openpyxl>=3.1.2",
    "xlsxwriter>=3.1.9",
]

# üîÑ Task Queue
queue = [
    "celery>=5.3.4",
    "redis>=5.0.1",
    "rq>=1.15.1",
]

# üîç Search & Indexing
search = [
    "elasticsearch>=8.11.0",
    "elasticsearch-dsl>=8.11.0",
    "whoosh>=2.7.4",
]

# üì± Mobile & Push
mobile = [
    "pyfcm>=1.5.4",
    "aioapns>=3.1.0",
    "twilio>=8.11.0",
]

# üåê Cloud Services
cloud = [
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
]

# üé® UI & Visualization
ui = [
    "streamlit>=1.28.2",
    "plotly>=5.17.0",
    "pillow>=10.1.0",
]

# üìà All optional dependencies
all = [
    "chat-api[ai,monitoring,dev,prod,data,queue,search,mobile,cloud,ui]"
]

[project.urls]
Homepage = "https://github.com/your-org/chat-api"
Documentation = "https://chat-api.readthedocs.io"
Repository = "https://github.com/your-org/chat-api.git"
Issues = "https://github.com/your-org/chat-api/issues"
Changelog = "https://github.com/your-org/chat-api/blob/main/CHANGELOG.md"

[project.scripts]
chat-api = "src.main:main"
chat-migrate = "scripts.migrate:main"
chat-seed = "scripts.seed:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*"]

# üîß Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# üì¶ isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "scripts", "tests"]
known_third_party = ["fastapi", "sqlalchemy", "redis", "httpx"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# üîç MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "dashscope.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
]
ignore_missing_imports = true

# üß™ Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "websocket: marks tests as WebSocket tests",
    "ai: marks tests as AI service tests",
    "database: marks tests as database tests",
    "redis: marks tests as Redis tests",
]
asyncio_mode = "auto"

# üìä Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# üîß Flake8 Configuration (in setup.cfg or .flake8)
# Note: Flake8 doesn't support pyproject.toml yet

# üöÄ Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

# üìã Ruff Configuration (Alternative to Flake8)
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

# üîÑ Pre-commit Configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.11.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
]
